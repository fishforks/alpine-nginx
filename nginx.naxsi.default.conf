server {
    listen 80;
    server_name _;
    root /var/www/public;
    index index.php index.html index.htm ;
#error page
    #error_page 404             /404.html;
    #error_page 500 502 503 504 /50x.html;
  # Naxsi config
  # 启用Naxsi模块 并拦截指定的非法请求。如果要关闭Naxsi模块，可使用SecRulesDisabled选项。
    SecRulesEnabled;
    # 拒绝访问时展示的页面
    DeniedUrl "/RequestDenied";
    # 启用学习模式，即拦截请求后不拒绝访问，只将触发规则的请求写入日志。建议开发模式的时候启用学习模式
    # LearningMode;
    LibInjectionSql; #enable libinjection support for SQLI
    LibInjectionXss; #enable libinjection support for XSS
    # 检查规则 确定 naxsi 何时采取行动
    CheckRule "$SQL >= 8" BLOCK; #the action to take when the $SQL score is superior or equal to 8
    CheckRule "$RFI >= 8" BLOCK;
    CheckRule "$TRAVERSAL >= 5" BLOCK;
    CheckRule "$UPLOAD >= 5" BLOCK;
    CheckRule "$XSS >= 8" BLOCK;
    # Naxsi config end
    # 
# for laravel rewrite
  # location / {
  #   try_files $uri /index.php?$args;
  # }

#rewrite for thinkphp
  # if (!-e $request_filename) {
  #   rewrite "^/(.*)"  /index.php?s=/$1 last;
  #   break;
  # }

  # 与php容器协同工作 start
  # fastcgi_pass [连接容器的名字或则别名]:9000， 如不需要PHP支持，可删除本段
   location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
       #安装相应的PHP容器后再打开这里即可支持PHP, 
        #fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
    # 与php容器协同工作end

    # 配置拦截后拒绝访问时展示的页面，这里直接返回403。
    location /RequestDenied {
      return 403;
    }
    #静态资源缓存配置
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ { expires 30d;  access_log off; }
    location ~ .*\.(js|css)?$ { expires 7d; access_log off; }
    location ~ /\.ht { deny all; }
  }
